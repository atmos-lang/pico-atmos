val SDL = require <- "SDL"
val IMG = require <- "SDL.image"

defer {
    IMG.quit()
    SDL.quit()
}

func try_sdl (f, ...) {
	val t = @{ f(...) }
	if !t[1] {
		error(t[#t])
	}
	return (table.unpack(t))
}

val formats, ret, err = IMG.init <- @{IMG.flags.PNG}
if !formats[IMG.flags.PNG] {
	error(err)
}

val WIN = try_sdl(SDL.createWindow, @{
	title	= "pico-lua: Click, Drag, Cancel",
	width	= 256,
	height	= 256,
        flags	= @{ SDL.flags.OpenGL },
})

val REN = try_sdl(SDL.createRenderer, WIN, -1)

val sfc = try_sdl(IMG.load, "Lua-SDL2.png")
val tex = try_sdl(REN.createTextureFromSurface, REN, sfc)

;;pico-state-set-font("tiny.ttf", 10)

func rect_vs_mouse (r, m) {
    set m = copy(m)
    set m.w = 1
    set m.h = 1
    SDL.hasIntersection(r, m)
}

spawn {
    var text = " "
    var rect = @{x=108,y=108, w=40,h=40}
    spawn {
        every :Pico.Draw {
            REN::setDrawColor(0x000000)
            REN::clear()
            REN::setDrawColor(0xFFFFFF)
            REN::fillRect(rect)
            REN::present()
            ;;pico-output-draw-text([0,-20], text)
        }
    }
    loop {
        val click = await(:Pico.Mouse.Button.Dn, rect_vs_mouse(rect,evt))
        val orig = copy(rect)
        set text = "... clicking ..."
        par_or {
            await(:Pico.Key.Dn, evt.name==:Escape)
            set rect = copy(orig)
            set text = "!!! CANCELLED !!!"
        } with {
            par_or {
                await(:Pico.Mouse.Motion)
                set text = "... dragging ..."
                await(:Pico.Mouse.Button.Up)
                set text = "!!! DRAGGED !!!"
            } with {
                every :Pico.Mouse.Motion {
                    set rect.x = orig.x + (evt.x - click.x)
                    set rect.y = orig.y + (evt.y - click.y)
                }
            }
        } with {
            await(:Pico.Mouse.Button.Up)
            set text = "!!! CLICKED !!!"
        }
    }
}

loop {
	val e = SDL.waitEvent(50)
    ifs {
        (e == nil) => {}
        (e.type == SDL.event.Quit)            => break()
        (e.type == SDL.event.MouseButtonUp)   => emit(:Pico.Mouse.Button.Up(e))
        (e.type == SDL.event.MouseButtonDown) => emit(:Pico.Mouse.Button.Dn(e))
        (e.type == SDL.event.MouseMotion)     => emit(:Pico.Mouse.Motion(e))
        (e.type == SDL.event.KeyDown) => {
            set e.name = SDL.getKeyName(e.keysym.sym)
            emit(:Pico.Key.Dn(e))
        }
    }
    emit(:Pico.Draw)
}
