val SDL = require <- "SDL"
val IMG = require <- "SDL.image"

defer {
    IMG.quit()
    SDL.quit()
}

func try_sdl (f, ...) {
	val t = [ f(...) ]
	if !t[0] {
		error(t[#t-1])
	}
	return (table.unpack(t))
}

val formats, ret, err = IMG.init <- [IMG.flags.PNG]
if !formats[IMG.flags.PNG-1] {
	error(err)
}

val WIN = try_sdl(SDL.createWindow, [
	title	= "pico-lua: Click, Drag, Cancel",
	width	= 256,
	height	= 256,
        flags	= [ SDL.flags.OpenGL ],
])

val REN = try_sdl(SDL.createRenderer, WIN, -1)

val sfc = try_sdl(IMG.load, "Lua-SDL2.png")
val tex = try_sdl(REN.createTextureFromSurface, REN, sfc)

;;pico-state-set-font("tiny.ttf", 10)

func rect_vs_pos (r, p) {
    set p.w = 1
    set p.h = 1
    SDL.hasIntersection(r, p)
}

spawn {
    var text = " "
    var rect = [x=0,y=0, w=10,h=10]
    spawn {
        every :Pico:Draw {
            REN.setDrawColor(REN, 0x000000)
            REN.clear(REN)
            REN.setDrawColor(REN, 0xFFFFFF)
            REN.fillRect(REN, rect)
            ;;pico-output-draw-text([0,-20], text)
        }
    }
    loop {
        val click = await(:Pico:Mouse:Button:Dn, rect_vs_pos(rect,evt))
        val orig = copy(rect)
        set text = "... clicking ..."
        par_or {
            await(:Pico:Key:Dn, evt.key==:Key:Escape)
            set rect = copy(orig)
            set text = "!!! CANCELLED !!!"
        } with {
            par_or {
                await(:Pico:Mouse:Motion)
                set text = "... dragging ..."
                await(:Pico:Mouse:Button:Up)
                set text = "!!! DRAGGED !!!"
            } with {
                every :Pico:Mouse:Motion {
                    set rect.pos.x = orig.pos.x + (evt.pos.x - click.x)
                    set rect.pos.y = orig.pos.y + (evt.pos.y - click.y)
                }
            }
        } with {
            await(:Pico:Mouse:Button:Up)
            set text = "!!! CLICKED !!!"
        }
    }
}

loop {
	loop e in SDL.pollEvent {
        dump(:e, e, e())
		ifs {
            (e.type == SDL.event.Quit)            => break()
		    (e.type == SDL.event.KeyDown)         => emit(:Pico:Key:Down(e))
		    (e.type == SDL.event.MouseButtonUp)   => emit(:Pico:Mouse:Button:Up(e))
		    (e.type == SDL.event.MouseButtonDown) => emit(:Pico:Mouse:Button:Down(e))
		    (e.type == SDL.event.MouseMotion)     => emit(:Pico:Mouse:Motion(e))
		}
	}
    emit(:Pico:Draw)
}
