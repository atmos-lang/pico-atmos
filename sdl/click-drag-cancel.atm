;;LUA_PATH="/x/atmos/src/?.lua;" lua5.4 /x/atmos/src/atmos.lua click-drag-cancel.atm

val SDL = require "SDL"
val TTF = require "SDL.ttf"

defer {
    TTF.quit()
    SDL.quit()
}

func try_sdl (f, ...) {
	val t = @{ f(...) }
	if !t[1] {
		error(t[#t])
	}
	return (table.unpack(t))
}

val WIN = try_sdl(SDL.createWindow, @{
	title  = "pico-lua: Click, Drag, Cancel",
	width  = 256,
	height = 256,
    flags  = @{ SDL.flags.OpenGL },
})
val REN = try_sdl(SDL.createRenderer, WIN, -1)

TTF.init() -> assert
val FNT = TTF.open("DejaVuSans.ttf", 10) -> assert

func rect_vs_pos (r, p) {
    set p = copy(p)
    set p.w = 1
    set p.h = 1
    SDL.hasIntersection(r, p)
}

func write (t, str) {
    val sfc = FNT::renderUtf8(str, "blended", @{r=255,g=255,b=255}) -> assert
    val tex = REN::createTextureFromSurface(sfc) -> assert
    set t.str = str
    set t.tex = tex
}

spawn {
    var text = @{ str=" ", tex=nil }
    text->write " "
    var rect = @{x=108,y=108, w=40,h=40}
    spawn {
        every :Pico.Draw {
            REN::setDrawColor(0x000000)
            REN::clear()
            REN::setDrawColor(0xFFFFFF)
            REN::fillRect(rect)
            REN::copy(text.tex,nil, @{x=100,y=200,w=100,h=20})
            REN::present()
        }
    }
    loop {
        val click = await(:Pico.Mouse.Button.Dn, rect_vs_pos(rect,evt))
        val orig = copy(rect)
        text->write "... clicking ..."
        par_or {
            await(:Pico.Key.Dn, evt.name==:Escape)
            set rect = copy(orig)
            text->write "!!! CANCELLED !!!"
        } with {
            par_or {
                await(:Pico.Mouse.Motion)
                text->write "... dragging ..."
                await(:Pico.Mouse.Button.Up)
                text->write "!!! DRAGGED !!!"
            } with {
                every :Pico.Mouse.Motion {
                    set rect.x = orig.x + (evt.x - click.x)
                    set rect.y = orig.y + (evt.y - click.y)
                }
            }
        } with {
            await(:Pico.Mouse.Button.Up)
            text->write "!!! CLICKED !!!"
        }
    }
}

loop {
	val e = SDL.waitEvent(50)
    if e != nil {
        match e.type {
            SDL.event.Quit            => break()
            SDL.event.MouseButtonUp   => emit(:Pico.Mouse.Button.Up(e))
            SDL.event.MouseButtonDown => emit(:Pico.Mouse.Button.Dn(e))
            SDL.event.MouseMotion     => emit(:Pico.Mouse.Motion(e))
            SDL.event.KeyDown => {
                set e.name = SDL.getKeyName(e.keysym.sym)
                emit(:Pico.Key.Dn(e))
            }
        }
    }
    emit(:Pico.Draw)
}
